from sec_api import FullTextSearchApi
import socketio
import time
import os
from datetime import datetime  # Add this line to import the datetime module


# Get your API key from an environment variable
api_key = os.getenv('SEC_API_KEY')

# If the API key is not set, raise an error to notify the user
if not api_key:
    raise ValueError("Please set the SEC_API_KEY environment variable.")

# Initialize the FullTextSearch API with your API key
fullTextSearchApi = FullTextSearchApi(api_key=api_key)

# Define your keywords for data breaches
keywords = [
    "data breach",
    "cybersecurity incident",
    "unauthorized access",
    "compromised",
    "data leak",
    "security breach",
    "exposed data",
    "hacked",
    "phishing",
    "malware",
    "ransomware",
    "IT system",
    "security measures",
    "bad actor",
    "API",
    "impact assessment",
    "response measures",
    "ongoing investigation",
    "legal proceedings",
    "financial implications",
    "regulatory compliance",
    "risk mitigation",
    "material effect",
    "operational disruption",
    "notification of incident",
    "forensic investigation",
    "data security",
    "privacy incident",
    "information security",
    "breach notification",
    "incident response",
    "cyber attack",
    "threat actor",
    "vulnerability",
    "encryption",
    "security incident",
    "security event",
    "data protection",
    "cyber risk",
    "cyber threat",
    "network intrusion",
    "security audit",
    "security vulnerability",
    "cybersecurity measures",
    "data integrity",
    "incident report",
    "security breach report",
    "cybersecurity breach",
    "information breach",
    "security compromise",
    "data confidentiality",
    "cyber incident",
    "security infrastructure"
]

# Path to the file where filings are recorded
filings_record_path = "filings_record.txt"

# Function to read recorded filings from the file
def read_recorded_filings():
    if not os.path.exists(filings_record_path):
        return set()
    with open(filings_record_path, 'r') as file:
        return set(file.read().splitlines())

# Function to write a new filing to the file
def record_filing(accession_no):
    with open(filings_record_path, 'a') as file:
        file.write(accession_no + '\n')

# Function to process and print filing details
def process_filing(filing, recorded_filings):
    if filing['accessionNo'] in recorded_filings:
        return False  # Skip the filing if it's already recorded
    print(f"Accession Number: {filing['accessionNo']}")
    print(f"CIK: {filing['cik']}")
    print(f"Company Name: {filing['companyNameLong']}")
    print(f"Ticker: {filing['ticker']}")
    print(f"Description: {filing['description']}")
    print(f"Form Type: {filing['formType']}")
    print(f"Document Type: {filing['type']}")
    print(f"Filing URL: {filing['filingUrl']}")
    print(f"Filed At: {filing['filedAt']}")
    print("--------------------------------------------------\n")
    record_filing(filing['accessionNo'])  # Record the new filing
    return True

# Load the set of recorded filings
recorded_filings = read_recorded_filings()

# Initialize the socket.io client
sio = socketio.Client()

# Event handler for successful connection
@sio.on("connect", namespace="/all-filings")
def on_connect():
    print("Connected to the real-time SEC filings stream.")

# Event handler for receiving filings
@sio.on("filing", namespace="/all-filings")
def on_filings(data):
    # Here you can process the real-time filings
    # For example, check if the filing contains any of the keywords
    for keyword in keywords:
        if keyword.lower() in data['description'].lower():
            process_filing(data, recorded_filings)
            break  # If a keyword is found, no need to check further

# Connect to the real-time filings stream
sio.connect("https://api.sec-api.io:3334", namespaces=["/all-filings"], transports=["websocket"])

# Start the non-blocking event loop for the socket.io client
sio.start_background_task(sio.wait)

# Historical search code
# Get today's date in the required format
today_date = datetime.now().strftime('%Y-%m-%d')

# Join the keywords into a single string query with OR operator
keywords_query = ' OR '.join(f'"{keyword}"' for keyword in keywords)

# Define your query parameters for the historical search
historical_query = {
    "query": keywords_query,
    "formTypes": ['8-K'],
    "startDate": '2021-01-01',
    "endDate": today_date,  # Set the end date to today's date
}

# Fetch the historical filings
historical_filings = fullTextSearchApi.get_filings(historical_query)

# Flag to check if new filings were found
new_filings_found = False

# Process each historical filing
for filing in historical_filings['filings']:
    if process_filing(filing, recorded_filings):
        new_filings_found = True

# If no new filings were found, print the message
if not new_filings_found:
    print("No new filings found.")

# Keep the program running
try:
    while True:
        time.sleep(1)  # Sleep to reduce CPU usage
except KeyboardInterrupt:
    # Handle any other way of stopping the script
    print("Script interrupted, stopping...")
finally:
    sio.disconnect()  # Ensure the socket.io client is disconnected
